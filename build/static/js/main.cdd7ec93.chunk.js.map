{"version":3,"sources":["common/apis.js","components/nav.style.js","common/color.js","components/NavBar.js","components/shared.style.js","components/CodeBlock.js","components/HeadingBlock.js","pages/Art.js","pages/ArtDetail.js","App.js","serviceWorker.js","index.js"],"names":["issues","NavWrapCircle","styled","div","NavBar","Math","max","random","this","props","trigger","renderNavText","React","Component","Wrapper","Content","List","ListItem","ListItemTitle","ListItemExtra","CodeBlock","SyntaxHighlighter","registerLanguage","jsx","sass","scss","javascript","language","value","className","style","tomorrow","PureComponent","defaultProps","elements","h1","h2","h3","h4","h5","h6","Heading","level","children","createElement","type","Art","state","list","getIssues","fetch","method","res","ok","json","setState","console","log","map","item","index","to","number","key","title","moment","updated_at","format","ArtDetail","withRouter","detail","match","params","getArtDetail","body","parseHtml","htmlParser","isValidNode","node","processingInstructions","source","escapeHtml","astPlugins","renderers","code","App","exact","path","window","location","pathname","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdd7ec93.chunk.js","sourcesContent":["export const host = 'https://api.github.com/'\nexport const issues = `${host}repos/joephon/blog/issues`","import styled from '@emotion/styled'\nimport { black1, black2, white1 } from '../common'\n\nexport const NavWrapCircle = styled.div`\n  position: fixed;\n  right: 20px;\n  bottom: 60px;\n\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  box-shadow: 0px 0px 3px ${white1};\n  line-height: 60px;\n  text-align: center;\n  background-color: ${black2};\n  color: ${white1};\n  &:hover {\n    cursor: pointer;\n  }\n`","export const black = '#000'\nexport const black1 = '#303336'\nexport const black2 = '#202124'\nexport const black3 = '#191c23'\n\nexport const white = '#fff'\nexport const white1 = '#fafafa'\n\nexport const grey = '#ccc'\nexport const grey2 = '#eee'","import React from 'react'\nimport { NavWrapCircle } from './nav.style'\n\nexport class NavBar extends React.Component {\n\n  renderNavText() {\n    if (Math.max(0.5, Math.random()) === 0.5) {\n      return `GoTo`\n    } else {\n      return `走起`\n    }\n  }\n\n  render() {\n    const { trigger } = this.props\n    return(\n      <NavWrapCircle>\n        {this.renderNavText()}\n      </NavWrapCircle>\n    )\n  }\n}","import styled from '@emotion/styled'\nimport { black1, black2, white1, grey } from '../common'\n\nexport const Wrapper = styled.div`\n  position: relative;\n  max-width: 1024px;\n  margin: 0 auto;\n`\n\nexport const Content = styled.div`\n  box-sizing: border-box;\n  padding: 20px;\n  background-color: ${black2};\n  & img {\n    border-radius: 20px;\n    display: block;\n    margin: 20px auto;\n    max-width: 100%;\n  }\n  & pre {\n    border-radius: 5px;\n    padding: 10px;\n    overflow-x: scroll;\n    background-color: ${black1};\n  }\n  @media screen and (max-width: 375px) {\n    padding: 10px;\n    font-size: 12px;\n    & pre {\n      border-radius: 3px;\n      padding: 5px;\n      overflow-x: scroll;\n      background-color: ${black1};\n    }\n  }\n`\n\nexport const List = styled.div`\n  padding: 20px;\n`\n\nexport const ListItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: ${black2};\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport const ListItemTitle = styled.div`\n  font-size: 18px;\n  color: ${white1};\n`\n\nexport const ListItemExtra = styled.div`\n  font-size: 12px;\n  color: ${grey};\n`","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\n// 设置高亮样式\nimport { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n// 设置高亮的语言\nimport { jsx, javascript, sass, scss } from \"react-syntax-highlighter/dist/esm/languages/prism\";\n\nexport class CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  componentWillMount() {\n    // 注册要高亮的语法，\n    // 注意：如果不设置打包后供第三方使用是不起作用的\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx);\n    SyntaxHighlighter.registerLanguage(\"sass\", sass);\n    SyntaxHighlighter.registerLanguage(\"scss\", scss);\n    SyntaxHighlighter.registerLanguage(\"javascript\", javascript);\n  }\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <figure className=\"highlight\">\n        <SyntaxHighlighter language={language} style={tomorrow}>\n          {value}\n        </SyntaxHighlighter>\n      </figure>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React, { PureComponent } from \"react\";\n\nconst elements = {\n  h1: \"h1\",\n  h2: \"h2\",\n  h3: \"h3\",\n  h4: \"h4\",\n  h5: \"h5\",\n  h6: \"h6\"\n};\n\nfunction Heading({ level, children, ...props }) {\n  return React.createElement(elements[level] || elements.h1, props, children);\n}\n\nHeading.defaultProps = {\n  type: \"h1\"\n};\n\nclass HeadingBlock extends PureComponent {\n  renderHtml = () => {\n    const { level, children } = this.props;\n\n    if (children && children.length > 0) {\n      const nodeValue = children[0].props.value;\n      return (\n        <Heading level={`h${level}`} id={nodeValue}>\n          <span className=\"title\">{children}</span>\n          <a href={`#${nodeValue}`} className=\"link\">\n            #\n          </a>\n        </Heading>\n      );\n    } else {\n      return <>{children}</>;\n    }\n  };\n  render() {\n    return <>{this.renderHtml()}</>;\n  }\n}\n\nexport default HeadingBlock;\n","import React from 'react'\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { issues } from '../common'\nimport { Wrapper, List, ListItem, ListItemTitle, ListItemExtra } from '../components'\n\nexport class Art extends React.Component {\n  state = {\n    list: []\n  }\n\n  componentDidMount() {\n    this.getIssues()\n  }\n\n  async getIssues() {\n    const res = await fetch(issues, {\n      method: 'get'\n    })\n    if (res.ok) {\n      const json = await res.json()\n      this.setState({ list: json })\n      console.log(1111, json)\n    }\n  }\n  \n  render() {\n    return(\n      <Wrapper>\n        <List>\n          {\n            this.state.list.map((item, index) => {\n              return <Link to={'/articles/' + item.number}>\n                <ListItem key={index}>\n                  <ListItemTitle>{item.title}</ListItemTitle>\n                  <ListItemExtra>{moment(item.updated_at).format('MM/DD/YYYY')}</ListItemExtra>\n                </ListItem>\n              </Link>\n            })\n          }\n        </List>\n      </Wrapper>\n    )\n  }\n}","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport MD from 'react-markdown'\nimport htmlParser from 'react-markdown/plugins/html-parser'\nimport { Wrapper, Content, CodeBlock } from '../components'\nimport { issues } from '../common'\n\n@withRouter\nclass ArtDetail extends React.Component {\n  state = {\n    detail: '',\n  }\n  componentDidMount() {\n    const { number } = this.props.match.params\n    this.getArtDetail(number)\n  }\n\n  async getArtDetail(number) {\n    const res = await fetch(`${issues}/${number}`)\n    if (res.ok) {\n      const { body } = await res.json()\n      this.setState({ detail: body })\n    }\n  }\n\n  render() {\n    const parseHtml = htmlParser({\n      isValidNode: node => node.type !== 'script',\n      processingInstructions: [/* ... */]\n    })\n    return(\n      <Wrapper>\n        <Content>\n          <MD\n            source={this.state.detail}\n            escapeHtml={false}\n            astPlugins={[parseHtml]}\n            renderers={{\n              code: CodeBlock,\n            }}\n          />\n        </Content>\n      </Wrapper>\n    )\n  }\n}\n\nexport { ArtDetail }","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Art, ArtDetail } from './pages'\nimport { NavBar } from './components'\n\nclass App extends React.Component {\n  state = {\n    trigger: true\n  }\n\n  render() {\n    return(\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Art {...this.state} />\n          </Route>\n          <Route exact path=\"/articles\">\n            <Art {...this.state} />\n          </Route>\n          <Route path=\"/articles/:number\">\n            <ArtDetail {...this.state}/>\n          </Route>\n          <Route path=\"*\">\n            <div>No Match For <code>{window.location.pathname}</code></div>\n          </Route>\n        </Switch>\n        <NavBar {...this.state}/>\n      </Router>\n    )\n  }\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}